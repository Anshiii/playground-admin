package seo

import (
	"fmt"
	"net/url"
	"reflect"
	"strings"

	"github.com/go-playground/form"
	"github.com/goplaid/web"
	"github.com/goplaid/x/presets"
	. "github.com/goplaid/x/vuetify"
	"github.com/jinzhu/gorm"

	h "github.com/theplant/htmlgo"
)

const (
	saveCollectionEvent = "seo_save_collection"
)

func (collection *Collection) Configure(b *presets.Builder, db *gorm.DB) {
	db.AutoMigrate(
		collection.settingModel,
	)

	b.GetWebBuilder().RegisterEventFunc(saveCollectionEvent, saveCollection(collection, db))

	b.Model(collection.settingModel).PrimaryField("Name").Label("SEO").Listing().PageFunc(collection.pageFunc(db))

	// b.FieldDefaults(presets.WRITE).
	// 	FieldType(&Setting{}).
	// 	ComponentFunc(SeoEditingComponentFunc)
	// SetterFunc(SeoSetterComponentFunc)

}

func (collection *Collection) pageFunc(db *gorm.DB) web.PageFunc {
	return func(ctx *web.EventContext) (r web.PageResponse, err error) {
		r.PageTitle = "SEO Setting"
		r.Body = VContainer(
			VRow(
				VCol(
					VContainer(
						h.H3("Site-wide Settings").Style("font-weight: 500"),
						h.P().Text("Here you can set site-wide variables and preferences for metadata.")),
				).Cols(3),
				VCol(
					VCard(
						VForm(
							collection.renderGlobalSection(db),
						),
					).Outlined(true).Elevation(2),
				).Cols(9),
			),
			VRow(
				VCol(
					VContainer(
						h.H3("Page Metadata Defaults").Attr("style", "font-weight: 500"),
						h.P().Text("These defaults are for pages automatically generated by the system, you can override them on the individual pages.")),
				).Cols(3),
				VCol(
					VExpansionPanels(
						collection.renderSeoSections(db),
					).Focusable(true),
				).Cols(9),
			),
		).Attr("style", "background-color: #f5f5f5;max-width:100%")

		return
	}
}

func (collection *Collection) renderGlobalSection(db *gorm.DB) h.HTMLComponent {
	setting := reflect.New(reflect.Indirect(reflect.ValueOf(collection.settingModel)).Type()).Interface().(QorSEOSettingInterface)
	db.Where("is_global_seo = ? AND name = ?", true, collection.Name).First(setting)
	if db.NewRecord(setting) {
		setting.SetName(collection.Name)
		setting.SetSEOType(collection.Name)
		setting.SetIsGlobalSEO(true)
		db.Save(setting)
	}

	value := reflect.Indirect(reflect.ValueOf(collection.globalSetting))
	settingValue := setting.GetGlobalSetting()
	for i := 0; i < value.NumField(); i++ {
		fieldName := value.Type().Field(i).Name
		if settingValue[fieldName] != "" {
			value.Field(i).Set(reflect.ValueOf(settingValue[fieldName]))
		}
	}

	var comps h.HTMLComponents
	for i := 0; i < value.Type().NumField(); i++ {
		filed := value.Type().Field(i)
		comps = append(comps, VTextField().FieldName(fmt.Sprintf("%s.%s", collection.Name, filed.Name)).Label(filed.Name).Value(value.Field(i).String()).Clearable(true))
	}

	return VForm(
		VCardText(
			comps,
		),

		VCardActions(
			VSpacer(),
			VBtn("Save").Color("primary").Large(true).OnClick(saveCollectionEvent, collection.Name),
		),
	)
}

func (collection *Collection) renderSeoSections(db *gorm.DB) h.HTMLComponents {
	var comps h.HTMLComponents
	for _, seo := range collection.registeredSEO {
		setting := reflect.New(reflect.Indirect(reflect.ValueOf(collection.settingModel)).Type()).Interface().(QorSEOSettingInterface)
		db.Where("name = ?", seo.Name).First(setting)
		if db.NewRecord(setting) {
			setting.SetName(seo.Name)
			setting.SetSEOType(seo.Name)
			db.Save(setting)
		}
		setting.SetCollection(collection)

		comp := VExpansionPanel(
			VExpansionPanelHeader(h.H4(seo.Name).Style("font-weight: 500;")),
			VExpansionPanelContent(
				VCardText(
					seoSettingComponent(seo.Name, setting.GetSEOSetting()),
				),
				VCardActions(
					VSpacer(),
					VBtn("Save").Color("primary").Large(true).OnClick(saveCollectionEvent, seo.Name),
				),
			),
		)

		comps = append(comps, comp)
	}

	return comps
}

func seoSettingComponent(name string, setting Setting) h.HTMLComponents {
	return h.Components(
		VRow(
			VCol(
				VBtn("").Width(100).Icon(true).Children(VIcon("add_box"), h.Text("SiteName")),
			).Cols(2),
			VCol().Cols(2),
		),
		h.H6("Basic").Style("margin-top:15px;margin-bottom:15px;"),
		VCard(
			VCardText(
				VTextField().Counter(65).FieldName(fmt.Sprintf("%s.%s", name, "Title")).Label("Title").Value(setting.Title).Clearable(true),
				VTextField().Counter(150).FieldName(fmt.Sprintf("%s.%s", name, "Description")).Label("Description").Value(setting.Description).Clearable(true),
				VTextarea().Counter(255).Rows(2).AutoGrow(true).FieldName(fmt.Sprintf("%s.%s", name, "Keywords")).Label("Keywords").Value(setting.Keywords).Clearable(true),
			),
		).Color("#f5f5f5").Elevation(0),
		h.H6("Open Graph Information").Style("margin-top:15px;margin-bottom:15px;"),
		VCard(
			VCardText(
				VRow(
					VCol(VTextField().FieldName(fmt.Sprintf("%s.%s", name, "OpenGraphURL")).Label("Open Graph URL").Value(setting.OpenGraphURL).Clearable(true)).Cols(6),
					VCol(VTextField().FieldName(fmt.Sprintf("%s.%s", name, "OpenGraphType")).Label("Open Graph Type").Value(setting.OpenGraphType).Clearable(true)).Cols(6),
				),
				VRow(
					VCol(VTextField().FieldName(fmt.Sprintf("%s.%s", name, "OpenGraphImageURL")).Label("Open Graph Image URL").Value(setting.OpenGraphImageURL).Clearable(true)).Cols(6),
					VCol(VTextField().FieldName(fmt.Sprintf("%s.%s", name, "OpenGraphImageFromMediaLibrary")).Label("Open Graph Image").Clearable(true)).Cols(6),
				),
			),
		).Color("#f5f5f5").Elevation(0),
	)
}

func saveCollection(collection *Collection, db *gorm.DB) web.EventFunc {
	return func(ctx *web.EventContext) (r web.EventResponse, err error) {
		if len(ctx.Event.Params) == 0 {
			return
		}

		prefix := ctx.Event.Params[0]

		setting := reflect.New(reflect.Indirect(reflect.ValueOf(collection.settingModel)).Type()).Interface().(QorSEOSettingInterface)
		if db.Where("name = ?", prefix).First(setting).RecordNotFound() {
			return
		}

		if setting.GetIsGlobalSEO() {
			globalSetting := make(map[string]string)
			for fieldWithPrefix := range ctx.R.Form {
				if strings.HasPrefix(fieldWithPrefix, prefix) {
					field := strings.Replace(fieldWithPrefix, fmt.Sprintf("%s.", prefix), "", -1)
					globalSetting[field] = ctx.R.Form.Get(fieldWithPrefix)
				}
			}
			setting.SetGlobalSetting(globalSetting)
		} else {
			values := url.Values{}
			for fieldWithPrefix := range ctx.R.Form {
				if strings.HasPrefix(fieldWithPrefix, prefix) {
					field := strings.Replace(fieldWithPrefix, fmt.Sprintf("%s.", prefix), "", -1)
					values[field] = []string{ctx.R.Form.Get(fieldWithPrefix)}
				}
			}
			s := setting.GetSEOSetting()
			decoder := form.NewDecoder()
			fmt.Println(values)
			decoder.Decode(&s, values)
			setting.SetSEOSetting(s)
		}

		db.Save(setting)
		return
	}
}
